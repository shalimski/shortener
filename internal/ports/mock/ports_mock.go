// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/ports.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/shalimski/shortener/internal/domain"
)

// MockShortenerService is a mock of ShortenerService interface.
type MockShortenerService struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerServiceMockRecorder
}

// MockShortenerServiceMockRecorder is the mock recorder for MockShortenerService.
type MockShortenerServiceMockRecorder struct {
	mock *MockShortenerService
}

// NewMockShortenerService creates a new mock instance.
func NewMockShortenerService(ctrl *gomock.Controller) *MockShortenerService {
	mock := &MockShortenerService{ctrl: ctrl}
	mock.recorder = &MockShortenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerService) EXPECT() *MockShortenerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShortenerService) Create(ctx context.Context, longURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, longURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShortenerServiceMockRecorder) Create(ctx, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortenerService)(nil).Create), ctx, longURL)
}

// Delete mocks base method.
func (m *MockShortenerService) Delete(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShortenerServiceMockRecorder) Delete(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShortenerService)(nil).Delete), ctx, shortURL)
}

// Find mocks base method.
func (m *MockShortenerService) Find(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockShortenerServiceMockRecorder) Find(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockShortenerService)(nil).Find), ctx, shortURL)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, url domain.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, url)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, shortURL)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context, shortURL string) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, shortURL)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx, shortURL)
}

// MockShortURLGenerator is a mock of ShortURLGenerator interface.
type MockShortURLGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLGeneratorMockRecorder
}

// MockShortURLGeneratorMockRecorder is the mock recorder for MockShortURLGenerator.
type MockShortURLGeneratorMockRecorder struct {
	mock *MockShortURLGenerator
}

// NewMockShortURLGenerator creates a new mock instance.
func NewMockShortURLGenerator(ctrl *gomock.Controller) *MockShortURLGenerator {
	mock := &MockShortURLGenerator{ctrl: ctrl}
	mock.recorder = &MockShortURLGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLGenerator) EXPECT() *MockShortURLGeneratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockShortURLGenerator) Next(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockShortURLGeneratorMockRecorder) Next(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockShortURLGenerator)(nil).Next), ctx)
}

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCacher) Del(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacherMockRecorder) Del(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacher)(nil).Del), ctx, shortURL)
}

// Get mocks base method.
func (m *MockCacher) Get(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder) Get(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), ctx, shortURL)
}

// Set mocks base method.
func (m *MockCacher) Set(ctx context.Context, shortURL, longURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, shortURL, longURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacherMockRecorder) Set(ctx, shortURL, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacher)(nil).Set), ctx, shortURL, longURL)
}
